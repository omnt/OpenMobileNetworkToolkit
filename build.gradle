// Top-level build file where you can add configuration options common to all sub-projects/modules.


buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:8.1.2'
        def nav_version = "2.5.3"
        classpath "androidx.navigation:navigation-safe-args-gradle-plugin:$nav_version"
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.6.21'
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}



/*plugins {
    id("org.spdx.sbom") version "0.4.0"
}


spdxSbom {
    targets {
        // create a target named "release",
        // this is used for the task name (spdxSbomForRelease)
        // and output file (release.spdx.json)
        create("release") {
            // use a different configuration (or multiple configurations)
            configurations = ['releaseRuntimeClasspath']

            // provide scm info (usually from your CI)
            scm {
                uri.set("my-scm-repository")
                revision.set("asdfasdfasdf...")
            }

            // adjust properties of the document
            document {
                name.set("OMNT-SPDX")
                namespace.set("https://my.org/spdx/<some UUID>")
                creator.set("Person:NGNI")
                packageSupplier.set("Organization:Fraunhofer FOKUS NGNI")

                // add an uber package on the document between the document and the
                // root module of the project being analyzed, you probably don't need this
                // but it's available if you want to describe the artifact in a special way
                //uberPackage {
                //    // you must set all or none of these
                //    name.set("goose")
                //    version.set("1.2.3")
                //    supplier.set("Organization:loosebazooka industries")
                //}
            }
            // optionally have multiple targets
            // create("another") {
            // }
        }
    }
}*/

configurations {
    runtimeClasspath
    releaseRuntimeClasspath
}



task clean(type: Delete) {
    delete rootProject.buildDir
}